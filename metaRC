# MetaRC
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export PS1='\e[0;44m\]\t\[\e[00m\] \[\e[1;36m\]\u\e[1;32m\]@\[\e[0;36m\]\H\[\e[1;36m\]:\[\e[0m\]/$(pwd) \n\[\e[1;32m\]\j \[\e[1;36m\]> \[\e[00m\]'


BASH_ENV=$HOME/.bashrc
HISTTIMEFORMAT=$(date +%Y%m%d-%H%M%S--)

SVN_EDITOR=vim

# k8s alias and functions section

mastertaint () {
  kubectl taint nodes --all node-role.kubernetes.io/master-
}
setpod () {
  export TARGET_POD=$(kubectl get pods -o name | grep $1 | cut -d '/' -f2)
}
followpod () {
  kubectl logs -n $1 -l app=$2 --follow
}
kubeproxyon () {
  kubectl patch ds -n kube-system kube-proxy --type merge -p '{"spec":{"template":{"spec":{"nodeSelector":{"non-calico": null}}}}}'
}
iptableson () {
  kubectl patch installation.operator.tigera.io default --type merge -p '{"spec":{"calicoNetwork":{"linuxDataplane":"Iptables"}}}'
}
kdeletion () {
  for x in $(kubectl get all | awk '{print $1}' | grep -v NAME | grep -v pod); do kubectl delete $x; done
}
alias m8='microk8s.kubectl'
alias k3='kubectl'
alias k='kubectl'
alias kswatch='kubectl -n kube-system get pods --watch'
alias checkbpf='mount | grep /sys/fs/bpf'
alias mountbpf='mount bpffs /sys/fs/bpf -t bpf'
alias hubbletail='hubble --server localhost:4245 observe --tail'
alias podbash='kubectl exec -it $TARGET_POD /bin/bash'
alias descpod='kubectl describe $TARGET_POD'
alias descall='kubectl describe all -A'
alias natable='iptables -v --numeric --table nat --list'
alias sysnet='iptables -v --numeric --table nat --list KUBE-SERVICES'
alias ndport='iptables -v --numeric --table nat --list KUBE-NODEPORTS'
alias syscfgmp='kubectl get configmap -n kube-system kube-proxy -o yaml'
alias allcfgmp='kubectl get configmap -A -o yaml'
alias endpts='kubectl get endpoints kubernetes -o wide'

# calicoctl alias and functions section

alias bgpcfg='calicoctl get bgpconfig default -o yaml'

kubepoff () {
  calicoctl patch felixconfiguration default --patch='{"spec": {"bpfKubeProxyIptablesCleanupEnabled": false}}'
}
kubepon () {
  calicoctl patch felixconfiguration default --patch='{"spec": {"bpfKubeProxyIptablesCleanupEnabled": true}}'
}
ebpfon () {
  calicoctl patch felixconfiguration default --patch='{"spec": {"bpfEnabled": true}}'
}
ebpfoff () {
  calicoctl patch felixconfiguration default --patch='{"spec": {"bpfEnabled": false}}'
}
dsron () {
  calicoctl patch felixconfiguration default --patch='{"spec": {"bpfExternalServiceMode": "DSR"}}'
}
dsroff () {
  calicoctl patch felixconfiguration default --patch='{"spec": {"bpfExternalServiceMode": "Tunnel"}}'
}
cwireon () {
  calicoctl patch felixconfiguration default --type='merge' -p '{"spec":{"wireguardEnabled":true}}'
}
cwireoff () {
  calicoctl patch felixconfiguration default --type='merge' -p '{"spec":{"wireguardEnabled":false}}'
}

# OCI image signing and verification with syft and cosign

createcosign () {
  cosign generate-key-pair
}

buildSBOM () {
  syft "$1"
  echo "Writing JSON SBOM to SBOM.json"
  syft "$1" -o json > SBOM.json
}

cosignimage () {
  cosign sign --key $1 $2
}

cosignpredicate () {
  cosign attest --predicate $1 --key $2 $3
}

cosignverifygate () {
  cosign verify-attestation --key $1 $2 || echo "ERROR - Image ATTESTATION FAILED"
}

cosignverifysbom () {
  cosign verify-attestation --key $1 $2 | jq '.payload |= @base64d | .payload | fromjson | .predicate.Data | fromjson | .'
}


# Toolbox .bashrc

alias alln='ss -tulpan | grep LISTEN'
alias reviewset='set | less'
alias lsl='ls -larth --color=auto'
alias ls='ls --color=auto'
alias pss='ps awwwTfux'
alias psz='ps uaxwwwZ'
alias pscpu='ps auxwww | sort -nr -k 3 | grep -v TIME.COMMAND'
alias pscpu10='ps auxwww | sort -nr -k 3 | grep -v TIME.COMMAND | head -10'
alias l='ls -larth'
alias lsofof='lsof | grep $1'
alias netdns='ss -atxr'
alias netip='ss -tawp'
alias netipall='ss -tawpx'
alias errors='grep -i error * | less'
alias broot='sudo su -'
alias boxstats='uptime && users && date'
alias errorhunt='grep -i error * | less'
alias dusage='df -h && date'
alias squeeze='sudo find . -name "*.log" -exec gzip -9 {} \;'
alias loghunt='find . -name "*.log" -exec ls -larth {} ];'
alias scripter='cd /usr/local/scripts'
alias cfger='cd /usr/local/cfgs'
alias brutezip='sudo gzip $1/*log'
alias bkoff='bigreport && cp ~/*out /var/log ; tar czvf backup-$(hostname)-$(date +'%Y%m%d%H%M%S'.tgz /var/log && scp backup*.tgz $(cat /tmp/user)@$(cat /tmp/backup):/tmp/ && shutdown -r now'
alias ff='firefox 2>> firefox.$(date +%Y%m%d-%H_%S).log'
alias chrm='chromium 2>> chromium.$(date +%Y%m%d-%H_%S).log'
alias shredhard='shred -v -n 25 -u -z'
alias gensshkey='ssh-keygen -t ed25519'

# kernel module related
alias kernmodules="find /lib/modules/$(uname -r) -type f -name '*.ko*'"
alias loadmodule="/sbin/modprobe -r -a -i $1"

# openssl section
alias genmac="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'"
alias speedtest='openssl speed'

alias ecckey='openssl ecparam -out ecc.key -name prime256v1 -genkey'

alias extractrsapub='openssl rsa -in rsa.pem -pubout > rsa.pub'
alias extractpubfromcert='openssl x509 -in extract.crt -noout -pubkey > cert.pub'
alias rsa4096='openssl genrsa 4096'
alias rsa2048='openssl genrsa 2048'

# Two different rsa signing methods, the first prints Verified OK, the second prints the contents.
# Note that the dgst signing can use EC keys as well.
rsasign () {
  openssl dgst -sign $3 -keyform PEM -sha256 -out $2 -binary $1
}
rsasign2 () {
  openssl rsautl -sign -in $1 -inkey $3 -out $2
}
rsaverify () {
  openssl dgst -verify $2 -keyform PEM -sha256 -signature $1 -binary $3
}
rsaverify2 () {
  openssl rsautl -verify -in $1 -inkey $2 -pubin
}
# Here is an example using the secp384r1.pem we generate with gensecp function to do EC file signing.
384s () {
  openssl dgst -sha256 -sign secp384r1.pem "$1" > "$2"
}

alias newcsr='openssl req -out CSR.csr -new -key ' # pass the key name after the alias like: newcsr mykey.key
alias checkcsr='openssl req -text -noout -verify -in' # pass the csr name like: checkcsr CSR.csr
alias checkkey='openssl rsa -check -in' # pass the key name like: checkkey mykey.key
alias checkcrt='openssl x509 -text -noout -in' # pass the cert name like: checkcrt mycert.crt
alias gencacert='openssl req -new -x509 -key ./ca.key -out ca.crt -days 3653'
alias signcsr='openssl x509 -req -days 360 -in CSR.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out example.crt -sha256'
alias signv3='openssl x509 -req -days 365 -in CSR.csr -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -out example.crt -sha256 -extensions 'v3_req''

alias gendh2048='openssl dhparam -out /etc/dhparam-2048 2048'
alias gendh4096='openssl dhparam -out /etc/dhparam-4096 4096'

alias grsa='openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048'
alias grsas='openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365'

alias rand64='openssl rand -base64 32' # redirect to a file

alias ldapcert='openssl s_client -connect localhost:389 -starttls ldap -showcerts'

# ECC manual operations with openssl

gensecp () {
  openssl ecparam -name secp384r1 -genkey -noout -out secp384r1.pem
  openssl ec -in secp384r1.pem -pubout -out secp384r1.pub
}

derive () {
  openssl pkeyutl -derive -inkey secp384r1.pem -peerkey peerpub.pem -out secret.bin
}

# AES256 with a keyfile

ecenc () {
  openssl enc -pbkdf2 -aes256 -base64 -k $(base64 secret.bin) -e -in $1 -out $2
}

ecdec () {
  openssl enc -pbkdf2 -aes256 -base64 -k $(base64 secret.bin) -d -in $1 -out $2
}

oldecenc () {
  openssl enc -aes256 -base64 -k $(base64 secret.bin) -e -in $1 -out $2 #old way, use the ecenc and ecdec instead when you can
}

oldecdec () {
  openssl enc -aes256 -base64 -k $(base64 secret.bin) -d -in $1 -out $2 #old way, use the ecenc and ecdec instead when you can
}

# create a secp384r1 private key straight into an environment variable

expsecp () {
  export P384TMP="$(openssl ecparam -name secp384r1 -genkey -noout)"
}

# derive straight to memory from files on disk, keep hex encoded for transparent because the input is binary blob

expsecppub () {
  export DREDGE="$(openssl pkeyutl -derive -inkey secp384r1.pem -peerkey peerpub.pem -out | xxd -p)"
}

# RSA manual operations with openssl

# osenc-setup
osenc-setup () {
  openssl genrsa 4096 > secret-rsa.pem
  openssl rsa -in secret-rsa.pem -pubout -outform pem > rsa.pub
}

# osenc-passgen
osenc-enc-pass () {
  openssl rand -base64 32 > key.bin
  openssl rsautl -encrypt -inkey rsa.pub -pubin -in key.bin -out key.bin.enc
}

oldosenc-decrypt () {
  openssl rsautl -decrypt -inkey secret-rsa.pem -in key.bin.enc -out key.bin
  openssl enc -d -aes256 -base64 -in $1 -out $2 -pass file:./key.bin  #old way, use the ecenc and ecdec instead when you can, -pbkdf2
}

# osenc my-secretfile.txt mysecretfile.txt.asc
osenc-file () {
  openssl enc -aes256 -base64 -pbkdf2 -salt -in $1 -out $2 -pass file:./key.bin
}

# osenc-decrypt mysecretfile.txt.asc my-secretfile.txt
osenc-decrypt () {
  openssl rsautl -decrypt -inkey secret-rsa.pem -in key.bin.enc -out key.bin
  openssl enc -d -aes256 -base64 -pbkdf2 -in $1 -out $2 -pass file:./key.bin
}



# usage of this openssl/libressl thing with the functions above involves both sides(people and/or computer) to do it correctly
# pgp (gpg) public key encryption is a much better solution
# but some machines or situations can't use gpg but can use openssl

# Example situation where Person B needs to share secrets with Person A.

# Person A runs the functions contents like:
# $ osenc-setup
# $ cp rsa.pub Person-A.rsa.pub
# Then Person A sends Person-A.rsa.pub to Person B.

# Person B runs the functions contents like:
# $ cp Person-A.rsa.pub rsa.pub
# $ osenc-passgen
# $ osenc-file Person-B-secret-for-Person-A.txt Person-B-secret-for-Person-A.txt.asc
# $ cp key.bin.enc Person-B-key.bin.enc
# Then Person B sends the Person-B-secret-for-Person-A.txt.asc file along with Person-B-key.bin.enc

# Then person A can decrypt Person B's key.bin.enc, and then decrypt Person-B-secret-for-Person-A.txt.asc
# like so:
# $ cp Person-B-key.bin.enc key.bin.enc
# $ osenc-decrypt

######################################## ->
#                                            ->          ->
#                                     -->     ->
#        collection             ->   ->    ->
#                                   ->                ->
#                                      --->  ->
########################################          ->

fpenc () {
   gpg --symmetric  --cipher=aes256 --always-trust --batch --armor --passphrase $1 --yes
}

pasg () {
  ps aux | grep "$1"
}

bck () {
  cp $1 $1.$(date +'%Y%m%d').bak && cp /dev/null $1 && gzip -9 $1.$(date +'%Y%m%d').bak &
}

backupmbr () {
  dd if=/dev/sda of=/root/mbr.backup bs=512 count=1
}

restorembr () {
  ls /root/mbr.backup || exit 1
  dd if=/root/mbr.backup of=/dev/sda bs=512 count=1
}

ufw-root-ssh-ban () {
  for x in $(grep Failed.password.for.root /var/log/auth.log | awk '{print $11}' | sort -u ); do
    ufw insert 1 deny from $x to any port 22;
  done
  ufw reload
}

ufw-all-ssh-ban () {
  for x in $(grep Failed.password.for /var/log/auth.log | awk '{print $11}' | sort -u ); do
    ufw insert 1 deny from $x to any port 22;
  done
  ufw reload
}

ext-ip () {
  lynx --dump $1;
}

netest () {
  val=$(which ss)
  if [ -z $val ]; then
    ss -an | grep -v u_str | grep EST
  else
    netstat -tan | grep EST
  fi
}

# use ssss implementation of shamir's secret sharing algorithm
# pass an argument as a password to encrypt all 2000 of the shares
# then the Trusted Distrubuter and Witness can send out one share
# per person or org, in this case requiring 2 shares to access
# the shared secret. Also see https://github.com/jpegleg/bash-jwt
ssss-gen () {
  echo "$(cat /dev/urandom | head -n2 | xxd -p | cut -c2-66 | cut -d' ' -f1)" | ssss-split -t 2 -n 2000 -w jwt | gpg --symmetric  --cipher=aes256 --always-trust --batch --armor --passphrase $1 --yes > .shamir_shares_$(date +%Y%m%d%H%M%S).dat
}

# generate strings for parts of secrets
# the seds in here are just a compat/complexity layer... you can take them out or switch them up if you prefer etc
azkar () {
  for i in 1 2 3 4 5 6 7 8 9 10 11 12 13; do
    echo "unit $i $(cat /dev/urandom | xxd -p | fold -12 | head -n1)";
  done;
  for g in 1 2 3; do
    echo "mod $g $(cat /dev/urandom | xxd -p | fold -4 | sed 's/1/%/g' | sed 's/2/+/g' | sed 's/3/./g' | sed 's/4/$/g' | sed 's/5/B/g' | sed 's/6/@/g' | sed 's/7/@/g' | sed 's/8/Q/g' | head -n1)";
  done
  for s in 1 2 3;
    do echo "header-base $s $(cat /dev/urandom | base64 | fold -12 | sed 's/1/%/g' | sed 's/2/+/g' | sed 's/3/./g' | sed 's/4/$/g' | sed 's/5/B/g' | sed 's/6/@/g' | sed 's/7/@/g' | sed 's/8/Q/g' | head -n1)";
  done
}

# Delete all keys from the (local) redis!
delredis () {
  echo "keys *" | redis-cli | cut -d' ' -f2 | while read line; do
    echo "Deleting $line";
    echo "del $line" | redis-cli;
  done
}

# Dump all redis keys to a flat file.
redisflat () {
  stamp=$(date +%Y%m%d%H%M%S)
  touch redis_"$stamp"_.flat
  echo "keys *" | redis-cli | cut -d' ' -f2 | while read line; do
    lineval="$(echo "get $line" | redis-cli | cut -d' ' -f2)"
    echo -e "$(date +%Y%m%d%H%M%S) \e[1;32mloading redis to flatfile...\e[0m";
    echo "|$line|$lineval|" >> redis_"$stamp"_.flat
  done
}

# Dump all redis keys to a compressed flat file.
redisfgz () {
  stamp=$(date +%Y%m%d%H%M%S)
  touch redis_"$stamp"_.flat
  echo "keys *" | redis-cli | cut -d' ' -f2 | while read line; do
    lineval="$(echo "get $line" | redis-cli | cut -d' ' -f2)"
    echo -e "$(date +%Y%m%d%H%M%S) \e[1;32mloading redis to flatfile...\e[0m";
    echo "|$line|$lineval|" >> redis_"$stamp"_.flat
  done
  gzip -9 redis_"$stamp"_.flat
}

# Load up redis from flat file.
flatload () {
  cat $1 | while read line; do
    echo "loading $line into \e[0;32redis\e[0m"
    key="$(echo $line | cut -d'|' -f2)"
    value="$(echo $line | cut -d'|' -f3)"
    echo "set $key $value" | redis-cli
  done
}

extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1     ;;
          *.tar.gz)    tar xvzf $1     ;;
          *.bz2)       bunzip2 $1      ;;
          *.rar)       unrar x $1      ;;
          *.gz)        gunzip $1       ;;
          *.tar)       tar xvf $1      ;;
          *.tbz2)      tar xvjf $1     ;;
          *.tgz)       tar xvzf $1     ;;
          *.zip)       unzip $1        ;;
          *.Z)         uncompress $1   ;;
          *.7z)        7z x $1         ;;
          *)           echo "'$1' cannot be extracted via >extract<" ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

tst () {
  month="$1"
  find . -newermt "01-$month -1 sec" -and -not -newermt "01-$month +1 month -1 sec" -exec tar -rvf $1.tar {} \;
  gzip -9 $1.tar || echo "No data from $month found."
}

dsort () {
  for y in 2022 2021 2020 2019 2018 2017 2016 2015 2014 2013 2012; do
    echo "Year $y";
    for x in Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec; do
      echo "Setting Month to $x";
      passalong=$x-$y
      tst $passalong
    done
    echo "Completed year $y..."
  done
}

lsnp() {
  ls -l $1 | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));if(k)printf("%0o ",k);print}';
}

statl () {
  stat -c '%a %n'
}

remindperms () {
  echo "0    (No read, no write, no execute)     ---"
  echo "1    (No read, no write, execute)    --x"
  echo "2    (No read, write, no execute)    -w-"
  echo "3    (No read, write, execute)    -wx"
  echo "4    (Read, no write, no execute)    r--"
  echo "5    (Read, no write, execute)    r-x"
  echo "6    (Read, write, no execute)    rw-"
  echo "7    (Read, write, execute)   rwx"
  echo "(who)    u        User"
  echo "(who)    g          Group owner"
  echo "(who)    o          Other"
  echo "(who)    a          All (“world”)"
  echo "(action)     +        Adding permissions"
  echo "(action)     -      Removing permissions"
  echo "(action)     =      Explicitly set permissions"
  echo "(permissions)    r          Read"
  echo "(permissions)    w          Write"
  echo "(permissions)    x          Execute"
  echo "(permissions)    t          Sticky bit"
  echo "(permissions)    s          Set UID or GID"
}

colorz () {
  for fgbg in 38 48 ; do
    for color in {0..255} ; do
        printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
        if [ $((($color + 1) % 6)) == 4 ] ; then
          echo
        fi
    done
    echo
  done
}

rainbow () {
  for color in 196 208 226 118 21 54 128 ; do
    printf "\e[48;5;%sm%*s" $color "${COLUMNS:-$(tput cols)}" '' | tr ' ' ' '
  done
}

loader () {
  PID=$!
  i=1
  sp="/-\|"
  echo -n ' '
  while [ -d /proc/$PID ]
  do
    printf "\b${sp:i++%${#sp}:1}"
  done
}

linesx () {
  printf '%*s' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

redoct () {
  val=$(tput cols);
  x=1;
  while [ $x -le $val ]; do
    echo -en "\e[31m✸\e[0m";
    x=$((x+1));
  done;
}

greenline () {
  val=$(tput cols);
  x=1;
  while [ $x -le $val ]; do
    echo -en "\e[32m■\e[0m";
    x=$((x+1));
  done;
}

badgers () {
  val=$(tput cols)
  x=1
  while [ $x -le $val ]; do
    echo -n 🦡
    x=$((x+1));
  done
}

stripsp () {
  tr -d '\040\011\012\015'
}
stripbl () {
  tr -d '[blank]'
}
rmblank () {
  sed '/^\s*$/d'
}
rmblankw () {
  sed -i '/^\s*$/d'
}
scrub () {
  sed 's/./∎/g'
}
scrubnumberswithlove () {
  sed 's/[0-9]//♥/g'
}
alias snwl="scrubnumberswithlove"

scrubletterswithlove () {
  sed 's/[a-Z]/♥/g'
}
alias slwl="scrubletterswithlove"

scrubnumbers () {
  sed 's/[0-9]/∎/g'
}
alias scbn="scrubnumbers"

scrubletters () {
  sed 's/[a-Z]/∎/g'
}
alias sblts="scrubletters"

bigreport () {
  touch ~/df.$(hostname).$(date +'%Y%m%d%H%M%S').out
  touch ~/lsof.$(hostname).$(date +'%Y%m%d%H%M%S').out
  touch  ~/netstat.$(hostname).$(date +'%Y%m%d%H%M%S').out
  touch ~/netstat.$(hostname).$(date +'%Y%m%d%H%M%S').out
  touch  ~/facter.$(hostname).$(date +'%Y%m%d%H%M%S').out
  touch  ~/users.$(hostname).$(date +'%Y%m%d%H%M%S').out
  touch  ~/last.$(hostname).$(date +'%Y%m%d%H%M%S').out

  df -h > ~/df.$(hostname).$(date +'%Y%m%d%H%M%S').out
  lsof > ~/lsof.$(hostname).$(date +'%Y%m%d%H%M%S').out
  netstat -a > ~/netstat.$(hostname).$(date +'%Y%m%d%H%M%S').out || ss -tanu > ~/ss.$(hostname).$(date +'%Y%m%d%H%M%S').out
  free -m > ~/free.$(hostname).$(date +'%Y%m%d%H%M%S').out
  facter > ~/facter.$(hostname).$(date +'%Y%m%d%H%M%S').out || uname -a > ~/uname.$(hostname).$(date +'%Y%m%d%H%M%S').out
  w > ~/users.$(hostname).$(date +'%Y%m%d%H%M%S').out
  last > ~/last.$(hostname).$(date +'%Y%m%d%H%M%S').out
}

harvest () {
  for x in $@ ; do tar czvf harvest.$(date +'%Y%m%d').$(hostname).$(echo "$@" | tr -d '\040\011\012\015').tgz "$x"; done
}

#######################################################---------------------> Enjoy.

# Avoid duplicates
export HISTCONTROL=ignoredups:erasedups
# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend
shopt -s extglob
shopt -s nullglob

# After each command, append to the history file and reread it
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND$'\n'}history -a; history -c; history -r"

#CryptoCore
# These functions are used for bitwise XOR operations
# for ad-hoc academic cryptographic batches.

# Convert common decimals to binary.
# The int2bin function can only handle 20 character inputs at a time.
int2bin () {
  num="$1"
  bin=""
  padding=""
  base2=(0 1)
  while [ "$num" -gt 0 ]; do
      bin=${base2[$(($num % 2))]}$bin
      num=$(($num / 2))
  done
  if [ $((8 - (${#bin} % 8))) -ne 8 ]; then
      printf -v padding '%*s' $((8 - (${#bin} % 8))) ''
      padding=${padding// /0}
  fi
  echo $padding$bin
}

# Call tr program to remove whitespace of all kinds
# to prepare for bitwise XOR.

# Convert binary to decimal. This thing needs work.
bin2dec () {
  echo $((2#$1))
}

# Return the seed length.
msglgth () {
  SETMSGLGTH=$(cat ~/seeds/a.xor | wc -c)
}

# Bitwise XOR.
exor () {
bash ~/Scripts/xor.sh
}
# Repeat n times command.
repeat () {
  local i max
  max=$1;
  shift;
  for ((i=1; i <= max ; i++)); do
    eval "$@";
  done
}

# One-time-pad batch XOR.
otpbatch () {
for datasets in $(ls ~/seeds/*); do
  cat $datasets | stripper > ~/seeds/b.xor;
  exor > "$datasets".output;
done 2> /dev/null &
}

# Same as otpbatch but with verbose output
reqbatch () {
for datasets in $(ls ~/seeds/*.xor); do
  cp $datasets ~/seeds/b.xor
  echo "now b.xor is $(cat ~/seeds/b.xor)";
  echo "XOR $datasets against a.xor - $(cat ~/seeds/a.xor)"
  echo $(exor) > "$datasets".output;
done
}

# Run a validation check on the seed files.
libvalidate () {
for data in $(ls ~/seeds/*); do
  echo "$data";
  cat "$data" | wc -c;
  echo "$data stripped";
  cat "$data" | stripper | wc -c;
done
}

# Generate a medium sized library of binary digits for playing with.
libgen () {
  for x in {1000..9999};
    do int2bin "$x" > "$x".xor ;
  done
}

######### Python extra tools section below.

byteconv() {
  python -c "import pprint;pprint.pprint(zip(('Byte', 'KByte', 'MByte', 'GByte', 'TByte'), (1 << 10*i for i in xrange(5))))"
}

sv2json() {
  python -c "import csv,json;print json.dumps(list(csv.reader(open('csv_file.csv'))))"
}

dhex() {
  export HEXIN=$1 ; python -c "print ''.join(chr(int(''.join(i), 16)) for i in zip(*[iter('$HEXIN')]*2))";
}

yaml2json() {
  python -c 'import yaml,pprint;pprint.pprint(yaml.load(open("convert.yml").read()))'
}
