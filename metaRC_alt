# Toolbox .bashrc

alias rvst='set | less'
alias lsl='ls -larth --color=auto'
alias ls='ls --color=auto'
alias pss='ps awwwTfux'
alias pscpu='ps auxwww | sort -nr -k 3 | grep -v TIME.COMMAND'
alias pscpu10='ps auxwww | sort -nr -k 3 | grep -v TIME.COMMAND | head -10'
alias l='ls -larth'
alias lsofof='lsof | grep $1'
alias netdns='ss -atxr'
alias netip='ss -tawp'
alias netipall='ss -tawpx'
alias errors='grep -i error * | less'
alias broot='sudo su -'
alias boxstats='uptime && users && date'
alias errorhunt='grep -i error * | less'
alias dusage='df -h && date'
alias squeeze='sudo find . -name "*.log" -exec gzip -9 {} \;'
alias loghunt='find . -name "*.log" -exec ls -larth {} ];'
alias scripter='cd /usr/local/scripts'
alias cfger='cd /usr/local/cfgs'
alias brutezip='sudo gzip $1/*log'
alias bkoff='bigreport && cp ~/*out /var/log ; tar czvf backup-$(hostname)-$(date +'%m%d%y%H%M%S'.tgz /var/log && scp backup*.tgz $(cat /tmp/user)@$(cat /tmp/backup):/tmp/ && shutdown -r now'
alias shredhard='shred -v -n 25 -u -z'
alias gensshkey='ssh-keygen -t ed25519'

# openssl section

alias genmac="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'"
alias speedtest='openssl speed'
alias extractrsapub='openssl rsa -in rsa-key.pem -pubout > rsa.pub'
alias extractpubfromcert='openssl x509 -in extract.crt  -noout -pubkey > cert.pub'
alias ecckey='openssl ecparam -out ecc.key -name prime256v1 -genkey'
alias rsa4096='openssl genrsa 4096'
alias rsa2048='openssl genrsa 2048'
alias rsasign='openssl rsautl -sign -in input.txt -inkey rsa.pem -out output.sign'
alias rsaverify='openssl rsautl -verify -in output.sign -inkey rsa.pub -pubin'
alias newcsr='openssl req -out CSR.csr -new -key ' # pass the key name after the alias like: newcsr mykey.key
alias checkcsr='openssl req -text -noout -verify -in' # pass the csr name like: checkcsr CSR.csr
alias checkkey='openssl rsa -check -in' # pass the key name like: checkkey mykey.key
alias checkcrt='openssl x509 -text -noout -in' # pass the cert name like: checkcrt mycert.crt
alias gencacert='openssl req -new -x509 -key ./ca.key -out ca.crt'
alias signcsr='openssl x509 -req -days 360 -in CSR.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out example.crt -sha256'
alias signv3='openssl x509 -req -days 365 -in CSR.csr -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -out example.crt -sha256 -extensions 'v3_req''
alias gendh2048='openssl dhparam -out /etc/dhparam-2048 2048'
alias gendh4096='openssl dhparam -out /etc/dhparam-4096 4096'
alias rand64='openssl rand -base64 32' # redirect to a file
alias gpgp='gpg --list-packets'
alias gpgl='gpg --list-keys'
alias grsa='openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048'
alias removekeypass='openssl rsa -in privateKey.pem -out newPrivateKey.pem'
alias hashcheck='openssl x509 -noout -modulus -in certificate.crt | openssl md5; openssl rsa -noout -modulus -in privateKey.key | openssl md5; openssl req -noout -modulus -in CSR.csr | openssl md5'
alias checkpk12p='openssl pkcs12 -info -in'
alias requestsign='openssl req -newkey rsa:2048 -sha256 -nodes -out servercert.csr -outform PEM'
alias ldapcert='openssl s_client -connect localhost:389 -starttls ldap -showcerts'


getpin () {
  echo "enter site:";
  read hashsite &&
  openssl s_client -servername "$hashsite" -connect "$hashsite":443 | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64;
}

# ECC manual operations with openssl

gensecp () {
  openssl ecparam -name secp384r1 -genkey -noout -out secp384r1.pem
  openssl ec -in secp384r1.pem -pubout -out secp384r1.pub
}

derive () {
  openssl pkeyutl -derive -inkey secp384r1.pem -peerkey peerpub.pem -out secret.bin
}

ecenc () {
  openssl enc -pbkdf2 -aes256 -base64 -k $(base64 secret.bin) -e -in $1 -out $2
}

ecdec () {
  openssl enc -pbkdf2 -aes256 -base64 -k $(base64 secret.bin) -d -in $1 -out $2
}

# rsa manual section with openssl

osenc-setup () {
  openssl genrsa 4096 > secret-rsa.pem
  openssl rsa -in secret-rsa.pem -pubout -outform pem > rsa.pub
}


osenc-enc-pass () {
  openssl rand -base64 32 > key.bin
  openssl rsautl -encrypt -inkey rsa.pub -pubin -in key.bin -out key.bin.enc
}


osenc-file () { 
  openssl enc -aes256 -base64 -pbkdf2 -salt -in $1 -out $2 -pass file:./key.bin
}


osenc-decrypt () {
  openssl rsautl -decrypt -inkey secret-rsa.pem -in key.bin.enc -out key.bin 
  openssl enc -d -aes256 -base64 -pbkdf2 -in $1 -out $2 -pass file:./key.bin 
}

fpenc () {
   gpg --symmetric  --cipher=aes256 --always-trust --batch --armor --passphrase $1 --yes
}

ufw-root-ssh-ban () {
  for x in $(grep Failed.password.for.root /var/log/auth.log | awk '{print $11}' | sort -u ); do
    ufw insert 1 deny from $x to any port 22;
  done
  ufw reload
}

ufw-all-ssh-ban () {
  for x in $(grep Failed.password.for /var/log/auth.log | awk '{print $11}' | sort -u ); do
    ufw insert 1 deny from $x to any port 22;
  done
  ufw reload
}

pasg () {
  ps aux | grep "$1"
}

bck () {
  cp $1 $1.$(date +"%m%d%y").bak && cp /dev/null $1 && gzip -9 $1.$(date +"%m%d%y").bak &
}
  
netest () {
  val=$(which ss)
  if [ -z $val ]; then
    ss -an | grep -v u_str | grep EST
  else
    netstat -tan | grep EST
  fi
}

# generate strings for parts of secrets
# the seds in here are just a compat/complexity layer... you can take them out or switch them up if you prefer etc
azkar () { 
  for i in 1 2 3 4 5 6 7 8 9 10 11 12 13; do 
    echo "unit $i $(cat /dev/urandom | xxd -p | fold -12 | head -n1)"; 
  done; 
  for g in 1 2 3; do
    echo "mod $g $(cat /dev/urandom | xxd -p | fold -4 | sed 's/1/%/g' | sed 's/2/+/g' | sed 's/3/./g' | sed 's/4/$/g' | sed 's/5/B/g' | sed 's/6/@/g' | sed 's/7/@/g' | sed 's/8/Q/g' | head -n1)";
  done 
  for s in 1 2 3;
    do echo "header-base $s $(cat /dev/urandom | base64 | fold -12 | sed 's/1/%/g' | sed 's/2/+/g' | sed 's/3/./g' | sed 's/4/$/g' | sed 's/5/B/g' | sed 's/6/@/g' | sed 's/7/@/g' | sed 's/8/Q/g' | head -n1)";
  done
}


# Delete all keys from the (local) redis!
delredis () {
  echo "keys *" | redis-cli | cut -d' ' -f2 | while read line; do
    echo "Deleting $line";
    echo "del $line" | redis-cli;
  done
}

# Dump all redis keys to a flat file.
redisflat () {
  stamp=$(date +%Y%m%d%H%M%S)
  touch redis_"$stamp"_.flat
  echo "keys *" | redis-cli | cut -d' ' -f2 | while read line; do
    lineval="$(echo "get $line" | redis-cli | cut -d' ' -f2)"
    echo -e "$(date +%Y%m%d%H%M%S) \e[1;32mloading redis to flatfile...\e[0m";
    echo "|$line|$lineval|" >> redis_"$stamp"_.flat
  done
}

# Dump all redis keys to a compressed flat file.
redisfgz () {
  stamp=$(date +%Y%m%d%H%M%S)
  touch redis_"$stamp"_.flat
  echo "keys *" | redis-cli | cut -d' ' -f2 | while read line; do
    lineval="$(echo "get $line" | redis-cli | cut -d' ' -f2)"
    echo -e "$(date +%Y%m%d%H%M%S) \e[1;32mloading redis to flatfile...\e[0m";
    echo "|$line|$lineval|" >> redis_"$stamp"_.flat 
  done
  gzip -9 redis_"$stamp"_.flat
}

# Load up redis from flat file.
flatload () {
  cat $1 | while read line; do 
    echo "loading $line into \e[0;32redis\e[0m"
    key="$(echo $line | cut -d'|' -f2)"
    value="$(echo $line | cut -d'|' -f3)"
    echo "set $key $value" | redis-cli 
  done
}

extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1     ;;
          *.tar.gz)    tar xvzf $1     ;;
          *.bz2)       bunzip2 $1      ;;
          *.rar)       unrar x $1      ;;
          *.gz)        gunzip $1       ;;
          *.tar)       tar xvf $1      ;;
          *.tbz2)      tar xvjf $1     ;;
          *.tgz)       tar xvzf $1     ;;
          *.zip)       unzip $1        ;;
          *.Z)         uncompress $1   ;;
          *.7z)        7z x $1         ;;
          *)           echo "'$1' cannot be extracted via >extract<" ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

tst () {
    month="$1"
    find . -newermt "01-$month -1 sec" -and -not -newermt "01-$month +1 month -1 sec" -exec tar -rvf $1.tar {} \;
    gzip -9 $1.tar || echo "No data from $month found."
}

dsort () {
for y in 2019 2018 2017 2016 2015 2014 2013 2012 2011 2010 2009; do
  echo "Year $y";
  for x in Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec; do
    echo "Setting Month to $x";
    passalong=$x-$y
    tst $passalong
  done
  echo "Completed year $y..."
done
}

repeat () {
  local i max
  max=$1; 
  shift;
  for ((i=1; i <= max ; i++)); do
    eval "$@";
  done
}

lsnp () { 
  ls -l $1 | awk '{k=0;for(i=0;i<=8;i++)k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));if(k)printf("%0o ",k);print}'; 
}

statl () {
  stat -c '%a %n' 
}

stripsp () {
  tr -d '\040\011\012\015'
}

stripbl () {
  tr -d '[blank]'
}

rmblank () {
  sed '/^\s*$/d'
}

rmblankw () {
  sed -i '/^\s*$/d'
}

scrub () {
  sed 's/[:graph:]/∎//g'
}

scrubnumbers () {
  sed 's/[0-9]/∎/g'
}

alias scbn="scrubnumbers"

scrubletters () {
  sed 's/[a-Z]/∎/g'
}

alias sblts="scrubletters"

bigreport () {
  touch ~/df.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  touch ~/lsof.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  touch  ~/netstat.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  touch ~/netstat.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  touch  ~/facter.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  touch  ~/users.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  touch  ~/last.$(hostname).$(date +'%m%d%y:%H:%M%S').out

  df -h > ~/df.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  lsof > ~/lsof.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  netstat -a > ~/netstat.$(hostname).$(date +'%m%d%y:%H:%M%S').out || ss -tanu > ~/ss.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  free -m > ~/free.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  facter > ~/facter.$(hostname).$(date +'%m%d%y:%H:%M%S').out || uname -a > ~/uname.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  w > ~/users.$(hostname).$(date +'%m%d%y:%H:%M%S').out
  last > ~/last.$(hostname).$(date +'%m%d%y:%H:%M%S').out
}

harvest () {
  for x in $@ ; do tar czvf harvest.$(date +'%m%d%y').$(hostname).$(echo "$@" | tr -d '\040\011\012\015').tgz "$x"; done
}
